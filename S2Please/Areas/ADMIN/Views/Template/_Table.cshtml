@model S2Please.Models.TableViewModel
@using S2Please.Helper
@using SHOP.COMMON
@{
    Layout = null;
    var timeVersion = FunctionHelpers.GetTimeVersion();
}
<style>
    .table-data2 thead {
        background: #333;
    }

    .table-data2 th {
        color: white !important;
    }

    .color-button-blue {
        background-color: #4066f0 !important;
    }
    .float-left{
        float:left;
        margin-left:5px
    }
</style>
@if (!string.IsNullOrEmpty(Model.TITLE_TABLE_NAME))
{
    <h3 class="title-5 m-b-35">@Model.TITLE_TABLE_NAME</h3>
}

<div class="table-data__tool">
    <div class="table-data__tool-left">
        @*<div class="rs-select2--light rs-select2--md">
            <select class="js-select2" name="property">
                <option selected="selected">All Properties</option>
                <option value="">Option 1</option>
                <option value="">Option 2</option>
            </select>
            <div class="dropDownSelect2"></div>
        </div>
        <div class="rs-select2--light rs-select2--sm">
            <select class="js-select2" name="time">
                <option selected="selected">Today</option>
                <option value="">3 Days</option>
                <option value="">1 Week</option>
            </select>
            <div class="dropDownSelect2"></div>
        </div>*@
        <button class="au-btn-filter button-border float-left" onclick="showPopupColumn('1','@Model.TABLE_NAME')" type="button">
            <i class="fa fa-filter"></i>@FunctionHelpers.GetValueLanguage("Button.Filter")
        </button>
        <button class="au-btn-filter button-border float-left" onclick="showPopupColumn('0','@Model.TABLE_NAME')" type="button">
            <i class="fa fa-unsorted"></i>@FunctionHelpers.GetValueLanguage("Button.Sort")
        </button>
        @if (Model.BULK_ACTION != null && Model.BULK_ACTION.Count() > 0)
        {
            int index=0;
            foreach (var action in Model.BULK_ACTION)
            {
                var funtionNameButon = action.FUNTION_NAME;
                if (Model.DATA != null && Model.DATA.Count() > 0)
                {
                    foreach (var data in Model.DATA)
                    {

                        foreach (Newtonsoft.Json.Linq.JProperty property in data)
                        {
                            if (!String.IsNullOrEmpty(funtionNameButon))
                            {
                                string valueReplace = "{" + property.Name + "}";
                                if (data[property.Name] != null && data[property.Name].Value != null)
                                {
                                    funtionNameButon = funtionNameButon.Replace(valueReplace, data[property.Name].Value.ToString());
                                }
                            }
                        }

                    }
                }
                if (action.DROPDOWN != null && action.DROPDOWN.Count() > 0)
                {
                    bool check = false;
                    foreach (var dropdown in action.DROPDOWN)
                    {
                        if (dropdown != null && FunctionHelpers.CheckPermission(Model.MENU_NAME, dropdown.ACTION_NAME))
                        {
                            check = true;
                            break;
                        }
                    }
                    if (true)
                    {

                    }
                    if (check)
                    {                       
                        <div class="dropdown" style="margin-top: 1px; float: left; margin-left: 5px;margin-right:0px;">
                            <button class="au-btn-filter dropdown-toggle" data-toggle="dropdown" title="@FunctionHelpers.GetValueLanguage(action.BUTTON_NAME)" onclick="@funtionNameButon" type="button" data-placement="top">
                                @FunctionHelpers.GetValueLanguage(action.BUTTON_NAME) <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">

                                @foreach (var dropdown in action.DROPDOWN)
                                {
                                    funtionNameButon = dropdown.FUNTION_NAME;
                                    if (Model.DATA != null && Model.DATA.Count() > 0)
                                    {
                                        foreach (var data in Model.DATA)
                                        {
                                            foreach (Newtonsoft.Json.Linq.JProperty property in data)
                                            {
                                                if (!String.IsNullOrEmpty(funtionNameButon))
                                                {
                                                    string valueReplace = "{" + property.Name + "}";
                                                    if (data[property.Name] != null && data[property.Name].Value != null)
                                                    {
                                                        funtionNameButon = funtionNameButon.Replace(valueReplace, data[property.Name].Value.ToString());
                                                    }
                                                }
                                            }

                                        }
                                    }
                                    if (dropdown != null && FunctionHelpers.CheckPermission(Model.MENU_NAME, dropdown.ACTION_NAME))
                                    {
                                        <li onclick="@funtionNameButon"><a class="dropdown-item cusor" >@FunctionHelpers.GetValueLanguage(dropdown.BUTTON_NAME)</a></li>
                                    }
                                }
                            </ul>
                        </div>

                        
                    }

                }
                else
                {
                    if (action != null && FunctionHelpers.CheckPermission(Model.MENU_NAME, action.ACTION_NAME))
                    {
                        <button class="item float-left" data-toggle="tooltip" data-placement="top" title="@FunctionHelpers.GetValueLanguage(action.BUTTON_NAME)" onclick="@funtionNameButon" type="button">
                            <i class="@action.CLASS"></i>
                        </button>
                    }

                }
                index++;
            }
        }
    </div>
    <div class="table-data__tool-right">
        @if (FunctionHelpers.CheckPermission(Model.MENU_NAME, Permission.Update) && Model.IS_ADD_NEW)
        {
            <button class="au-btn au-btn-icon au-btn--green au-btn--small" onclick="clickAdd()" type="button">
                <i class="zmdi zmdi-plus"></i>@FunctionHelpers.GetValueLanguage("Btn_Add")
            </button>
        }
        @if (FunctionHelpers.CheckPermission(Model.MENU_NAME, Permission.Export) && Model.IS_EXPORT_EXCEL)
        {
            <button class="au-btn au-btn-icon au-btn--green au-btn--small color-button-blue" onclick="exportExcel('@Model.TABLE_NAME')" type="button">
                <i class="fa fa-download"></i>@FunctionHelpers.GetValueLanguage("Btn_Export")
            </button>
        }@if (FunctionHelpers.CheckPermission(Model.MENU_NAME, Permission.Import) && Model.IS_IMPORT_EXCEL)
        {
            <button class="au-btn au-btn-icon au-btn--green au-btn--small color-button-blue" type="button">
                <i class="fa fa-upload"></i>@FunctionHelpers.GetValueLanguage("Btn_Import")
            </button>
        }
        @*<div class="rs-select2--dark rs-select2--sm rs-select2--dark2">
                <select class="js-select2" name="type">
                    <option selected="selected">Export</option>
                    <option value="">Option 1</option>
                    <option value="">Option 2</option>
                </select>
                <div class="dropDownSelect2"></div>
            </div>*@
    </div>
</div>
<div id="table-@Model.TABLE_NAME">
    @Html.Partial("~/Areas/ADMIN/Views/Template/_TableContent.cshtml", Model)
</div>

<script src="@Url.Content("~/Scripts/Common/Table.js?v=" + timeVersion)" type="text/javascript"></script>
