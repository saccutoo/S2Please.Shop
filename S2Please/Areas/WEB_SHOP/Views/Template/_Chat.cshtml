@using S2Please.Helper
@using S2Please.ViewModel
@using SHOP.COMMON
@using S2Please.Models
@using SHOP.COMMON.Helpers
@{
    List<ChatModel> chats = new List<ChatModel>();
    if (Session[Constant.ChatOnline] !=null)
    {
        chats = Session[Constant.ChatOnline] as List<ChatModel>;
        chats = chats.OrderBy(s => s.DATE_SEND).ToList();
    }
}
<div class="page-content page-container">
    <div class="padding">
        <div class=" container d-flex justify-content-center" id="page-content" @(chats != null && chats.Count() > 0 ? "" : "hidden" )>
            <div class="col-md-6">
                <div class="card card-bordered">
                    <div class="card-header">
                        <h4 class="card-title"><strong>@FunctionHelpers.GetValueLanguage("Chat.Chat")</strong></h4> <a class="btn btn-xs btn-secondary" onclick="hideChat()">@FunctionHelpers.GetValueLanguage("Chat.HideChat")</a>
                    </div>
                    @{ Guid guid = Guid.NewGuid();
                        var sessionId = string.Empty;
                        ChatModel chat = new ChatModel();
                        if (chats != null && chats.Count() > 0)
                        {
                            sessionId = chats.FirstOrDefault().SESSION_ID;
                            chat = chats.Where(s=>s.EMPLOYEE_ID==0).ToList().FirstOrDefault();
                        }
                        else
                        {
                            sessionId = guid.ToString();
                        }
                        if (chat == null || chat.USER_CUSTOMER_ID == 0)
                        {
                            if (CurrentUser.User != null && CurrentUser.User.USER_ID != 0)
                            {
                                chat.USER_CUSTOMER_ID = CurrentUser.User.USER_ID;
                                if (!string.IsNullOrEmpty(CurrentUser.User.PHONE))
                                {
                                    chat.PHONE = long.Parse(CurrentUser.User.PHONE);
                                }
                                chat.EMAIL = CurrentUser.User.EMAIL;
                                chat.CUSTOMER_NAME = CurrentUser.User.FULL_NAME;
                            }
                        }
                    }

                    <div class="card-body" id="information-chat" style="@(chats != null && chats.Count() > 0 ? "display:none" : "display:block" )">
                        <form id="form-information-chat">
                            <input value="@CurrentUser.User.ID" id="messenger-id" name="chats.USER_ID" hidden />

                            <input id="session-id" value="@sessionId" name="chats.SESSION_ID" hidden />
                            <div class="form-group" style=" margin-top: 10px; padding-left: 30px;">
                                @Html.Partial("~/Views/Template/_Input.cshtml", new InputModel() { Type = "text", Id = "MESSENGER-NAME", Class = "input-xlarge", Name = "model.CUSTOMER_NAME", LabelName = "Chat.Name", IsRequied = true, Style = "width: 90%;", Value = chat.CUSTOMER_NAME })
                            </div>
                            <div class="form-group" style=" margin-top: 10px; padding-left: 30px;">
                                @Html.Partial("~/Views/Template/_Input.cshtml", new InputModel() { Type = "text", Id = "MESSENGER-PHONE", Class = "input-xlarge", Name = "model.PHONE", LabelName = "Chat.Phone", IsRequied = true, Style = "width: 90%;", Value = chat.PHONE.ToString() })
                            </div>
                            <div class="form-group" style=" margin-top: 10px; padding-left: 30px;">
                                @Html.Partial("~/Views/Template/_Input.cshtml", new InputModel() { Type = "text", Id = "MESSENGER-EMAIL", Class = "input-xlarge", Name = "model.EMAIL", LabelName = "Chat.Email", IsRequied = false, Style = "width: 90%;", Value = chat.EMAIL })
                            </div>
                            <div class="form-group" style=" margin-top: 10px; padding-left: 30px;">
                                <button type="button" id="start-chat" class="btn btn-inverse">@FunctionHelpers.GetValueLanguage("Button.StartChat")</button>
                            </div>
                        </form>
                    </div>
                    <div class="ps-container ps-theme-default ps-active-y" id="chat-content" style="margin-top: 15px;overflow-y: scroll !important; height: 400px !important; @(chats != null && chats.Count() > 0 ? "display:block" : "display:none" )">
                        @*Chứa nội dung chát*@
                        @if (chats != null && chats.Count() > 0)
                        {
                            @Html.Partial("~/Areas/WEB_SHOP/Views/Template/_ChatContent.cshtml", chats)
                        }

                    </div>

                    <div class="publisher bt-1 border-light" id="chat-publisher" @(chats != null && chats.Count() > 0 ? "display:block" : "display:none" ) ">
                        <img class="avatar avatar-xs" src="/Image/administrator-male.png" alt="...">
                        <input class="publisher-input" type="text" placeholder="...." id="content-value"> <span class="publisher-btn file-group"></span>
                        <a class="publisher-btn text-info" href="#" data-abc="true" id="send-message"><i class="fa fa-paper-plane"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="font-lato" id="font-lato" onclick="showChat()" @(chats != null && chats.Count() > 0 ? "hidden" : "" )>
    <div id="tawkchat-minified-wrapper" class="white ltr-direction">
        <div id="tawkchat-minified-container" class="theme-background-color" style="border-radius: 17px 17px 0px 0px;">
            <div id="tawkchat-status-middle">
                <div id="tawkchat-status-text-container" class="theme-text-color">
                    <div id="tawkchat-status-message"><span id="short-message">Chát với shop</span></div>
                </div>
            </div>
        </div>
    </div>
</div>